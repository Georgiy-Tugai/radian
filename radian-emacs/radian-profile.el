;;; radian-profile.el --- Profile Emacs startup

(require 'radian-package)

(defvar radian-flattened-init-file
  (when user-init-file
    (when-let ((init-directory (file-name-directory user-init-file)))
      (expand-file-name "init-flat.el" init-directory)))
  "Init-file generated by `radian-flatten-init-file'.
If `user-init-file' is not something sane, this is nil.")

;; This is the most recent and full-featured Emacs startup profiler.
(use-package esup
  ;; My fork inhibits the behavior wherein esup descends into
  ;; `require' forms, because this causes a terrible bug with
  ;; `cl-lib', see [1].
  ;;
  ;; [1]: https://github.com/jschaf/esup/issues/40
  :recipe (:host github
           :repo "raxod502/esup"
           :upstream (:host github
                      :repo "jschaf/esup"))
  :defer-install t
  :commands (esup)
  :config

  ;; Integration with `radian-flatten-init-file'.

  (defun radian--advice-esup-use-init-flat (esup &optional init-file)
    "Make `esup' default to `radian-flattened-init-file' if available.
This is an `:around' advice for `esup'."
    (let* ((esup-user-init-file esup-user-init-file))
      (when (file-exists-p radian-flattened-init-file)
        (setq esup-user-init-file radian-flattened-init-file))
      (funcall esup init-file)
      (when (file-newer-than-file-p user-init-file radian-flattened-init-file)
        (message "Warning: init-file newer than flattened version"))))

  (advice-add #'esup :around #'radian--advice-esup-use-init-flat))

;; There's also profile-dotemacs, which intends to accomplish a
;; similar task. It's much older, and completely unmaintained (as far
;; as I know). But it can be useful sometimes.
(use-package profile-dotemacs
  ;; Package is unmaintained. No upstream.
  :recipe (:host github
           :repo "raxod502/profile-dotemacs")
  :defer-install t
  :commands (profile-dotemacs))

;; Nice function for making esup more useful.
(defun radian-flatten-init-file ()
  "Flatten the init-file into `radian-flattened-init-file'.
This means `esup' can profile it more nicely, since the whole
thing isn't wrapped in a bunch of error-catching forms. Note that
this means there will be no error checking, so only run the
flattened init-file if the regular one is working."
  (interactive)
  (let ((libs (cl-remove-if-not (lambda (feat)
                                  (string-prefix-p "radian-"
                                                   (symbol-name feat)))
                                features)))
    (with-temp-file radian-flattened-init-file
      (insert-file-contents-literally
       (expand-file-name "templates/init-profile-pre.el" radian-directory))
      (dolist (lib (nreverse libs))
        (goto-char (point-max))
        (insert-file-contents-literally
         (expand-file-name (format "%S.el" lib) radian-lib-directory)))
      (goto-char (point-max))
      (insert-file-contents-literally
       (expand-file-name "templates/init-profile-post.el" radian-directory)))
    (message "Wrote %s" radian-flattened-init-file)))

(provide 'radian-profile)

;;; radian-profile.el ends here
